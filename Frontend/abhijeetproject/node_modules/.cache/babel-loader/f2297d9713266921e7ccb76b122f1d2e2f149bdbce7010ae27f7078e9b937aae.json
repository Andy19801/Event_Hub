{"ast":null,"code":"// // src/features/admin/adminSlice.js\n// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import axios from 'axios';\n\n// // Thunks for async logic\n// export const fetchUsers = createAsyncThunk('admin/fetchUsers', async (_, { rejectWithValue }) => {\n//     try {\n//         const { data } = await axios.get('/api/admin/users');\n//         return data;\n//     } catch (error) {\n//         return rejectWithValue(error.response.data);\n//     }\n// });\n\n// export const deleteUser = createAsyncThunk('admin/deleteUser', async (userId, { rejectWithValue }) => {\n//     try {\n//         await axios.delete(`/api/admin/user/${userId}`);\n//         return userId;\n//     } catch (error) {\n//         return rejectWithValue(error.response.data);\n//     }\n// });\n\n// // Admin slice\n// const adminSlice = createSlice({\n//     name: 'admin',\n//     initialState: {\n//         users: [],\n//         loading: false,\n//         error: null,\n//     },\n//     reducers: {\n//         resetError: (state) => {\n//             state.error = null;\n//         },\n//     },\n//     extraReducers: (builder) => {\n//         builder\n//             .addCase(fetchUsers.pending, (state) => {\n//                 state.loading = true;\n//             })\n//             .addCase(fetchUsers.fulfilled, (state, action) => {\n//                 state.loading = false;\n//                 state.users = action.payload;\n//             })\n//             .addCase(fetchUsers.rejected, (state, action) => {\n//                 state.loading = false;\n//                 state.error = action.payload;\n//             })\n//             .addCase(deleteUser.fulfilled, (state, action) => {\n//                 state.users = state.users.filter((user) => user._id !== action.payload);\n//             })\n//             .addCase(deleteUser.rejected, (state, action) => {\n//                 state.error = action.payload;\n//             });\n//     },\n// });\n\n// // Export actions and reducers\n// export const { resetError } = adminSlice.actions;\n// export default adminSlice.reducer;","map":{"version":3,"names":[],"sources":["E:/Final Year project/Event Hub/Frontend/abhijeetproject/src/features/admin/adminSlice.js"],"sourcesContent":["// // src/features/admin/adminSlice.js\r\n// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n// import axios from 'axios';\r\n\r\n// // Thunks for async logic\r\n// export const fetchUsers = createAsyncThunk('admin/fetchUsers', async (_, { rejectWithValue }) => {\r\n//     try {\r\n//         const { data } = await axios.get('/api/admin/users');\r\n//         return data;\r\n//     } catch (error) {\r\n//         return rejectWithValue(error.response.data);\r\n//     }\r\n// });\r\n\r\n// export const deleteUser = createAsyncThunk('admin/deleteUser', async (userId, { rejectWithValue }) => {\r\n//     try {\r\n//         await axios.delete(`/api/admin/user/${userId}`);\r\n//         return userId;\r\n//     } catch (error) {\r\n//         return rejectWithValue(error.response.data);\r\n//     }\r\n// });\r\n\r\n// // Admin slice\r\n// const adminSlice = createSlice({\r\n//     name: 'admin',\r\n//     initialState: {\r\n//         users: [],\r\n//         loading: false,\r\n//         error: null,\r\n//     },\r\n//     reducers: {\r\n//         resetError: (state) => {\r\n//             state.error = null;\r\n//         },\r\n//     },\r\n//     extraReducers: (builder) => {\r\n//         builder\r\n//             .addCase(fetchUsers.pending, (state) => {\r\n//                 state.loading = true;\r\n//             })\r\n//             .addCase(fetchUsers.fulfilled, (state, action) => {\r\n//                 state.loading = false;\r\n//                 state.users = action.payload;\r\n//             })\r\n//             .addCase(fetchUsers.rejected, (state, action) => {\r\n//                 state.loading = false;\r\n//                 state.error = action.payload;\r\n//             })\r\n//             .addCase(deleteUser.fulfilled, (state, action) => {\r\n//                 state.users = state.users.filter((user) => user._id !== action.payload);\r\n//             })\r\n//             .addCase(deleteUser.rejected, (state, action) => {\r\n//                 state.error = action.payload;\r\n//             });\r\n//     },\r\n// });\r\n\r\n// // Export actions and reducers\r\n// export const { resetError } = adminSlice.actions;\r\n// export default adminSlice.reducer;"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}