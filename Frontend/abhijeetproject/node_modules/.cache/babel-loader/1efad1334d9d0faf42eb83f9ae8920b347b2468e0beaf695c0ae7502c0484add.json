{"ast":null,"code":"import{createSlice,createAsyncThunk}from'@reduxjs/toolkit';import axios from'axios';// Define an initial state\nconst initialState={token:null,user:null,loading:false,error:null};// Async thunk for login\nexport const loginUser=createAsyncThunk('auth/login',async(credentials,_ref)=>{let{rejectWithValue}=_ref;try{const response=await axios.post('/api/auth/login',credentials);return response.data;// Assumes the response contains { token, user }\n}catch(error){return rejectWithValue(error.response.data);}});// Async thunk for logout\nexport const logoutUser=createAsyncThunk('auth/logout',async()=>{return null;// Return null to reset the state\n});// Create the auth slice\nconst authSlice=createSlice({name:'auth',initialState,reducers:{clearAuthState:state=>{state.token=null;state.user=null;state.error=null;}},extraReducers:builder=>{builder.addCase(loginUser.pending,state=>{state.loading=true;state.error=null;}).addCase(loginUser.fulfilled,(state,action)=>{state.loading=false;state.token=action.payload.token;state.user=action.payload.user;}).addCase(loginUser.rejected,(state,action)=>{state.loading=false;state.error=action.payload||action.error.message;}).addCase(logoutUser.fulfilled,state=>{state.token=null;state.user=null;});}});// Export the actions and reducer\nexport const{clearAuthState}=authSlice.actions;export default authSlice.reducer;// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import axios from 'axios';\n// // Define an initial state\n// const initialState = {\n//   token: null,\n//   user: null,\n//   loading: false,\n//   error: null,\n// };\n// // Async thunk for login\n// export const loginUser = createAsyncThunk('auth/login', async (credentials) => {\n//   const response = await axios.post('/api/auth/login', credentials);\n//   return response.data; // Assumes the response contains { token, user }\n// });\n// // Async thunk for logout\n// export const logoutUser = createAsyncThunk('auth/logout', async () => {\n//   // Perform any logout logic here (e.g., invalidate token)\n//   return null; // Return null to reset the state\n// });\n// // Create the auth slice\n// const authSlice = createSlice({\n//   name: 'auth',\n//   initialState,\n//   reducers: {\n//     logout: (state) => {\n//       state.token = null;\n//       state.user = null;\n//     },\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(loginUser.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(loginUser.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.token = action.payload.token;\n//         state.user = action.payload.user;\n//       })\n//       .addCase(loginUser.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.error.message;\n//       })\n//       .addCase(logoutUser.fulfilled, (state) => {\n//         state.token = null;\n//         state.user = null;\n//       });\n//   },\n// });\n// // Export the actions and reducer\n// export const { logout } = authSlice.actions;\n// export default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","initialState","token","user","loading","error","loginUser","credentials","_ref","rejectWithValue","response","post","data","logoutUser","authSlice","name","reducers","clearAuthState","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","message","actions","reducer"],"sources":["D:/New folder/Event Hub/Frontend/abhijeetproject/src/features/auth/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\n// Define an initial state\r\nconst initialState = {\r\n  token: null,\r\n  user: null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\n// Async thunk for login\r\nexport const loginUser = createAsyncThunk('auth/login', async (credentials, { rejectWithValue }) => {\r\n  try {\r\n    const response = await axios.post('/api/auth/login', credentials);\r\n    return response.data; // Assumes the response contains { token, user }\r\n  } catch (error) {\r\n    return rejectWithValue(error.response.data);\r\n  }\r\n});\r\n\r\n// Async thunk for logout\r\nexport const logoutUser = createAsyncThunk('auth/logout', async () => {\r\n  return null; // Return null to reset the state\r\n});\r\n\r\n// Create the auth slice\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    clearAuthState: (state) => {\r\n      state.token = null;\r\n      state.user = null;\r\n      state.error = null;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loginUser.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(loginUser.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.token = action.payload.token;\r\n        state.user = action.payload.user;\r\n      })\r\n      .addCase(loginUser.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload || action.error.message;\r\n      })\r\n      .addCase(logoutUser.fulfilled, (state) => {\r\n        state.token = null;\r\n        state.user = null;\r\n      });\r\n  },\r\n});\r\n\r\n// Export the actions and reducer\r\nexport const { clearAuthState } = authSlice.actions;\r\nexport default authSlice.reducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n// import axios from 'axios';\r\n\r\n// // Define an initial state\r\n// const initialState = {\r\n//   token: null,\r\n//   user: null,\r\n//   loading: false,\r\n//   error: null,\r\n// };\r\n\r\n// // Async thunk for login\r\n// export const loginUser = createAsyncThunk('auth/login', async (credentials) => {\r\n//   const response = await axios.post('/api/auth/login', credentials);\r\n//   return response.data; // Assumes the response contains { token, user }\r\n// });\r\n\r\n// // Async thunk for logout\r\n// export const logoutUser = createAsyncThunk('auth/logout', async () => {\r\n//   // Perform any logout logic here (e.g., invalidate token)\r\n//   return null; // Return null to reset the state\r\n// });\r\n\r\n// // Create the auth slice\r\n// const authSlice = createSlice({\r\n//   name: 'auth',\r\n//   initialState,\r\n//   reducers: {\r\n//     logout: (state) => {\r\n//       state.token = null;\r\n//       state.user = null;\r\n//     },\r\n//   },\r\n//   extraReducers: (builder) => {\r\n//     builder\r\n//       .addCase(loginUser.pending, (state) => {\r\n//         state.loading = true;\r\n//         state.error = null;\r\n//       })\r\n//       .addCase(loginUser.fulfilled, (state, action) => {\r\n//         state.loading = false;\r\n//         state.token = action.payload.token;\r\n//         state.user = action.payload.user;\r\n//       })\r\n//       .addCase(loginUser.rejected, (state, action) => {\r\n//         state.loading = false;\r\n//         state.error = action.error.message;\r\n//       })\r\n//       .addCase(logoutUser.fulfilled, (state) => {\r\n//         state.token = null;\r\n//         state.user = null;\r\n//       });\r\n//   },\r\n// });\r\n\r\n// // Export the actions and reducer\r\n// export const { logout } = authSlice.actions;\r\n// export default authSlice.reducer;\r\n"],"mappings":"AAAA,OAASA,WAAW,CAAEC,gBAAgB,KAAQ,kBAAkB,CAChE,MAAO,CAAAC,KAAK,KAAM,OAAO,CAEzB;AACA,KAAM,CAAAC,YAAY,CAAG,CACnBC,KAAK,CAAE,IAAI,CACXC,IAAI,CAAE,IAAI,CACVC,OAAO,CAAE,KAAK,CACdC,KAAK,CAAE,IACT,CAAC,CAED;AACA,MAAO,MAAM,CAAAC,SAAS,CAAGP,gBAAgB,CAAC,YAAY,CAAE,MAAOQ,WAAW,CAAAC,IAAA,GAA0B,IAAxB,CAAEC,eAAgB,CAAC,CAAAD,IAAA,CAC7F,GAAI,CACF,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAV,KAAK,CAACW,IAAI,CAAC,iBAAiB,CAAEJ,WAAW,CAAC,CACjE,MAAO,CAAAG,QAAQ,CAACE,IAAI,CAAE;AACxB,CAAE,MAAOP,KAAK,CAAE,CACd,MAAO,CAAAI,eAAe,CAACJ,KAAK,CAACK,QAAQ,CAACE,IAAI,CAAC,CAC7C,CACF,CAAC,CAAC,CAEF;AACA,MAAO,MAAM,CAAAC,UAAU,CAAGd,gBAAgB,CAAC,aAAa,CAAE,SAAY,CACpE,MAAO,KAAI,CAAE;AACf,CAAC,CAAC,CAEF;AACA,KAAM,CAAAe,SAAS,CAAGhB,WAAW,CAAC,CAC5BiB,IAAI,CAAE,MAAM,CACZd,YAAY,CACZe,QAAQ,CAAE,CACRC,cAAc,CAAGC,KAAK,EAAK,CACzBA,KAAK,CAAChB,KAAK,CAAG,IAAI,CAClBgB,KAAK,CAACf,IAAI,CAAG,IAAI,CACjBe,KAAK,CAACb,KAAK,CAAG,IAAI,CACpB,CACF,CAAC,CACDc,aAAa,CAAGC,OAAO,EAAK,CAC1BA,OAAO,CACJC,OAAO,CAACf,SAAS,CAACgB,OAAO,CAAGJ,KAAK,EAAK,CACrCA,KAAK,CAACd,OAAO,CAAG,IAAI,CACpBc,KAAK,CAACb,KAAK,CAAG,IAAI,CACpB,CAAC,CAAC,CACDgB,OAAO,CAACf,SAAS,CAACiB,SAAS,CAAE,CAACL,KAAK,CAAEM,MAAM,GAAK,CAC/CN,KAAK,CAACd,OAAO,CAAG,KAAK,CACrBc,KAAK,CAAChB,KAAK,CAAGsB,MAAM,CAACC,OAAO,CAACvB,KAAK,CAClCgB,KAAK,CAACf,IAAI,CAAGqB,MAAM,CAACC,OAAO,CAACtB,IAAI,CAClC,CAAC,CAAC,CACDkB,OAAO,CAACf,SAAS,CAACoB,QAAQ,CAAE,CAACR,KAAK,CAAEM,MAAM,GAAK,CAC9CN,KAAK,CAACd,OAAO,CAAG,KAAK,CACrBc,KAAK,CAACb,KAAK,CAAGmB,MAAM,CAACC,OAAO,EAAID,MAAM,CAACnB,KAAK,CAACsB,OAAO,CACtD,CAAC,CAAC,CACDN,OAAO,CAACR,UAAU,CAACU,SAAS,CAAGL,KAAK,EAAK,CACxCA,KAAK,CAAChB,KAAK,CAAG,IAAI,CAClBgB,KAAK,CAACf,IAAI,CAAG,IAAI,CACnB,CAAC,CAAC,CACN,CACF,CAAC,CAAC,CAEF;AACA,MAAO,MAAM,CAAEc,cAAe,CAAC,CAAGH,SAAS,CAACc,OAAO,CACnD,cAAe,CAAAd,SAAS,CAACe,OAAO,CAQhC;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}