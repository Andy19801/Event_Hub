{"ast":null,"code":"import{createSlice}from'@reduxjs/toolkit';const initialState={count:0// Initial counter value\n};const counterSlice=createSlice({name:'counter',initialState,reducers:{increment:state=>{state.count+=1;// Increment the counter\n},decrement:state=>{state.count-=1;// Decrement the counter\n},reset:state=>{state.count=0;// Reset the counter to 0\n},toggleTrueFalseOnLogin:(state,action)=>{state.value=action.payload;// Toggle value based on login status\n}}});// Export actions\nexport const{increment,decrement,reset,toggleTrueFalseOnLogin}=counterSlice.actions;// Export the reducer\nexport default counterSlice.reducer;// import { createSlice } from '@reduxjs/toolkit';\n// const initialState = {\n//   value: false, // Adjust as needed\n// };\n// const counterSlice = createSlice({\n//   name: 'counter',\n//   initialState,\n//   reducers: {\n//     toggle_true_and_false_on_login: (state, action) => {\n//       state.value = action.payload;\n//     },\n//   },\n// });\n// export const { toggle_true_and_false_on_login } = counterSlice.actions;\n// export default counterSlice.reducer;\n// // counterSlice.js\n// import { createSlice } from '@reduxjs/toolkit';\n// export const counterSlice = createSlice({\n//   name: 'counter',\n//   initialState: {\n//     token: null,       // Initialize token as null\n//     isLoggedIn: false, // Initialize isLoggedIn as false\n//   },\n//   reducers: {\n//     login: (state, action) => {\n//       state.token = action.payload.token;  // Set token when logging in\n//       state.isLoggedIn = true;             // Set isLoggedIn to true on login\n//     },\n//     logout: (state) => {\n//       state.token = null;                  // Clear token on logout\n//       state.isLoggedIn = false;            // Set isLoggedIn to false on logout\n//     },\n//   },\n// });\n// // Export actions generated by createSlice\n// export const { login, logout } = counterSlice.actions;\n// // Export the reducer\n// export default counterSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","count","counterSlice","name","reducers","increment","state","decrement","reset","toggleTrueFalseOnLogin","action","value","payload","actions","reducer"],"sources":["E:/Final Year project/Event Hub/Frontend/abhijeetproject/src/features/counter/counterSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  count: 0, // Initial counter value\r\n};\r\n\r\nconst counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: (state) => {\r\n      state.count += 1; // Increment the counter\r\n    },\r\n    decrement: (state) => {\r\n      state.count -= 1; // Decrement the counter\r\n    },\r\n    reset: (state) => {\r\n      state.count = 0; // Reset the counter to 0\r\n    },\r\n    toggleTrueFalseOnLogin: (state, action) => {\r\n      state.value = action.payload; // Toggle value based on login status\r\n    },\r\n  },\r\n});\r\n\r\n// Export actions\r\nexport const { increment, decrement, reset, toggleTrueFalseOnLogin } = counterSlice.actions;\r\n\r\n// Export the reducer\r\nexport default counterSlice.reducer;\r\n\r\n\r\n\r\n\r\n// import { createSlice } from '@reduxjs/toolkit';\r\n\r\n// const initialState = {\r\n//   value: false, // Adjust as needed\r\n// };\r\n\r\n// const counterSlice = createSlice({\r\n//   name: 'counter',\r\n//   initialState,\r\n//   reducers: {\r\n//     toggle_true_and_false_on_login: (state, action) => {\r\n//       state.value = action.payload;\r\n//     },\r\n//   },\r\n// });\r\n\r\n// export const { toggle_true_and_false_on_login } = counterSlice.actions;\r\n// export default counterSlice.reducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// // counterSlice.js\r\n// import { createSlice } from '@reduxjs/toolkit';\r\n\r\n// export const counterSlice = createSlice({\r\n//   name: 'counter',\r\n//   initialState: {\r\n//     token: null,       // Initialize token as null\r\n//     isLoggedIn: false, // Initialize isLoggedIn as false\r\n//   },\r\n//   reducers: {\r\n//     login: (state, action) => {\r\n//       state.token = action.payload.token;  // Set token when logging in\r\n//       state.isLoggedIn = true;             // Set isLoggedIn to true on login\r\n//     },\r\n//     logout: (state) => {\r\n//       state.token = null;                  // Clear token on logout\r\n//       state.isLoggedIn = false;            // Set isLoggedIn to false on logout\r\n//     },\r\n//   },\r\n// });\r\n\r\n// // Export actions generated by createSlice\r\n// export const { login, logout } = counterSlice.actions;\r\n\r\n// // Export the reducer\r\n// export default counterSlice.reducer;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA,OAASA,WAAW,KAAQ,kBAAkB,CAE9C,KAAM,CAAAC,YAAY,CAAG,CACnBC,KAAK,CAAE,CAAG;AACZ,CAAC,CAED,KAAM,CAAAC,YAAY,CAAGH,WAAW,CAAC,CAC/BI,IAAI,CAAE,SAAS,CACfH,YAAY,CACZI,QAAQ,CAAE,CACRC,SAAS,CAAGC,KAAK,EAAK,CACpBA,KAAK,CAACL,KAAK,EAAI,CAAC,CAAE;AACpB,CAAC,CACDM,SAAS,CAAGD,KAAK,EAAK,CACpBA,KAAK,CAACL,KAAK,EAAI,CAAC,CAAE;AACpB,CAAC,CACDO,KAAK,CAAGF,KAAK,EAAK,CAChBA,KAAK,CAACL,KAAK,CAAG,CAAC,CAAE;AACnB,CAAC,CACDQ,sBAAsB,CAAEA,CAACH,KAAK,CAAEI,MAAM,GAAK,CACzCJ,KAAK,CAACK,KAAK,CAAGD,MAAM,CAACE,OAAO,CAAE;AAChC,CACF,CACF,CAAC,CAAC,CAEF;AACA,MAAO,MAAM,CAAEP,SAAS,CAAEE,SAAS,CAAEC,KAAK,CAAEC,sBAAuB,CAAC,CAAGP,YAAY,CAACW,OAAO,CAE3F;AACA,cAAe,CAAAX,YAAY,CAACY,OAAO,CAKnC;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAeA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}