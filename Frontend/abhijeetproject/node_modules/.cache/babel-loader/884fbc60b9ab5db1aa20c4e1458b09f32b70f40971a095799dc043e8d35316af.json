{"ast":null,"code":"// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import axios from 'axios';\n\n// // Async thunks for event owner actions\n// export const fetchEvents = createAsyncThunk('eventOwner/fetchEvents', async (_, { rejectWithValue }) => {\n//     try {\n//         const { data } = await axios.get('/api/eventOwner/my-events');\n//         return data;\n//     } catch (error) {\n//         return rejectWithValue(error.response.data.message);\n//     }\n// });\n\n// export const fetchBookings = createAsyncThunk('eventOwner/fetchBookings', async (eventId, { rejectWithValue }) => {\n//     try {\n//         const { data } = await axios.get(`/api/eventOwner/bookings/${eventId}`);\n//         return data;\n//     } catch (error) {\n//         return rejectWithValue(error.response.data.message);\n//     }\n// });\n\n// export const fetchFeedbacks = createAsyncThunk('eventOwner/fetchFeedbacks', async (eventId, { rejectWithValue }) => {\n//     try {\n//         const { data } = await axios.get(`/api/eventOwner/feedbacks/${eventId}`);\n//         return data;\n//     } catch (error) {\n//         return rejectWithValue(error.response.data.message);\n//     }\n// });\n\n// // Slice for managing the state of the event owner\n// const eventOwnerSlice = createSlice({\n//     name: 'eventOwner',\n//     initialState: {\n//         events: [],\n//         bookings: [],\n//         feedbacks: [],\n//         tickets: [],\n//         loading: false,\n//         error: null\n//     },\n//     reducers: {},\n//     extraReducers: (builder) => {\n//         builder\n//             .addCase(fetchEvents.pending, (state) => {\n//                 state.loading = true;\n//                 state.error = null;\n//             })\n//             .addCase(fetchEvents.fulfilled, (state, { payload }) => {\n//                 state.loading = false;\n//                 state.events = payload;\n//             })\n//             .addCase(fetchEvents.rejected, (state, { payload }) => {\n//                 state.loading = false;\n//                 state.error = payload;\n//             })\n//             .addCase(fetchBookings.pending, (state) => {\n//                 state.loading = true;\n//                 state.error = null;\n//             })\n//             .addCase(fetchBookings.fulfilled, (state, { payload }) => {\n//                 state.loading = false;\n//                 state.bookings = payload;\n//             })\n//             .addCase(fetchBookings.rejected, (state, { payload }) => {\n//                 state.loading = false;\n//                 state.error = payload;\n//             })\n//             .addCase(fetchFeedbacks.pending, (state) => {\n//                 state.loading = true;\n//                 state.error = null;\n//             })\n//             .addCase(fetchFeedbacks.fulfilled, (state, { payload }) => {\n//                 state.loading = false;\n//                 state.feedbacks = payload;\n//             })\n//             .addCase(fetchFeedbacks.rejected, (state, { payload }) => {\n//                 state.loading = false;\n//                 state.error = payload;\n//             });\n//     }\n// });\n\n// export default eventOwnerSlice.reducer;","map":{"version":3,"names":[],"sources":["E:/Final Year project/Event Hub/Frontend/abhijeetproject/src/features/eventOwner/eventOwnerSlice.js"],"sourcesContent":["// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n// import axios from 'axios';\r\n\r\n// // Async thunks for event owner actions\r\n// export const fetchEvents = createAsyncThunk('eventOwner/fetchEvents', async (_, { rejectWithValue }) => {\r\n//     try {\r\n//         const { data } = await axios.get('/api/eventOwner/my-events');\r\n//         return data;\r\n//     } catch (error) {\r\n//         return rejectWithValue(error.response.data.message);\r\n//     }\r\n// });\r\n\r\n// export const fetchBookings = createAsyncThunk('eventOwner/fetchBookings', async (eventId, { rejectWithValue }) => {\r\n//     try {\r\n//         const { data } = await axios.get(`/api/eventOwner/bookings/${eventId}`);\r\n//         return data;\r\n//     } catch (error) {\r\n//         return rejectWithValue(error.response.data.message);\r\n//     }\r\n// });\r\n\r\n// export const fetchFeedbacks = createAsyncThunk('eventOwner/fetchFeedbacks', async (eventId, { rejectWithValue }) => {\r\n//     try {\r\n//         const { data } = await axios.get(`/api/eventOwner/feedbacks/${eventId}`);\r\n//         return data;\r\n//     } catch (error) {\r\n//         return rejectWithValue(error.response.data.message);\r\n//     }\r\n// });\r\n\r\n// // Slice for managing the state of the event owner\r\n// const eventOwnerSlice = createSlice({\r\n//     name: 'eventOwner',\r\n//     initialState: {\r\n//         events: [],\r\n//         bookings: [],\r\n//         feedbacks: [],\r\n//         tickets: [],\r\n//         loading: false,\r\n//         error: null\r\n//     },\r\n//     reducers: {},\r\n//     extraReducers: (builder) => {\r\n//         builder\r\n//             .addCase(fetchEvents.pending, (state) => {\r\n//                 state.loading = true;\r\n//                 state.error = null;\r\n//             })\r\n//             .addCase(fetchEvents.fulfilled, (state, { payload }) => {\r\n//                 state.loading = false;\r\n//                 state.events = payload;\r\n//             })\r\n//             .addCase(fetchEvents.rejected, (state, { payload }) => {\r\n//                 state.loading = false;\r\n//                 state.error = payload;\r\n//             })\r\n//             .addCase(fetchBookings.pending, (state) => {\r\n//                 state.loading = true;\r\n//                 state.error = null;\r\n//             })\r\n//             .addCase(fetchBookings.fulfilled, (state, { payload }) => {\r\n//                 state.loading = false;\r\n//                 state.bookings = payload;\r\n//             })\r\n//             .addCase(fetchBookings.rejected, (state, { payload }) => {\r\n//                 state.loading = false;\r\n//                 state.error = payload;\r\n//             })\r\n//             .addCase(fetchFeedbacks.pending, (state) => {\r\n//                 state.loading = true;\r\n//                 state.error = null;\r\n//             })\r\n//             .addCase(fetchFeedbacks.fulfilled, (state, { payload }) => {\r\n//                 state.loading = false;\r\n//                 state.feedbacks = payload;\r\n//             })\r\n//             .addCase(fetchFeedbacks.rejected, (state, { payload }) => {\r\n//                 state.loading = false;\r\n//                 state.error = payload;\r\n//             });\r\n//     }\r\n// });\r\n\r\n// export default eventOwnerSlice.reducer;\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}