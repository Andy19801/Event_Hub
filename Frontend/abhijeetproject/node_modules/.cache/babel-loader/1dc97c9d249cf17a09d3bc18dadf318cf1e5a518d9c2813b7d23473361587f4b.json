{"ast":null,"code":"import{fetchEvents,fetchBookings,fetchFeedbacks}from'./eventOwnerSlice';export{fetchEvents,fetchBookings,fetchFeedbacks};// import { createAsyncThunk } from '@reduxjs/toolkit';\n// import {\n//   setLoading,\n//   setError,\n//   viewBookings,\n//   viewFeedbacks,\n//   setEvents,\n//   setTickets,\n// } from './eventOwnerSlice';\n// // Fetch Bookings\n// export const fetchBookings = createAsyncThunk('eventOwner/fetchBookings', async (eventId, { dispatch }) => {\n//   dispatch(setLoading(true));\n//   try {\n//     const response = await fetch(`/api/bookings/${eventId}`);\n//     const data = await response.json();\n//     dispatch(viewBookings(data));\n//   } catch (error) {\n//     dispatch(setError(error.message));\n//   } finally {\n//     dispatch(setLoading(false));\n//   }\n// });\n// // Fetch Feedbacks\n// export const fetchFeedbacks = createAsyncThunk('eventOwner/fetchFeedbacks', async (eventId, { dispatch }) => {\n//   dispatch(setLoading(true));\n//   try {\n//     const response = await fetch(`/api/feedbacks/${eventId}`);\n//     const data = await response.json();\n//     dispatch(viewFeedbacks(data));\n//   } catch (error) {\n//     dispatch(setError(error.message));\n//   } finally {\n//     dispatch(setLoading(false));\n//   }\n// });\n// // Create Event\n// export const createEvent = createAsyncThunk('eventOwner/createEvent', async (eventDetails, { dispatch }) => {\n//   dispatch(setLoading(true));\n//   try {\n//     const response = await fetch('/api/events', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(eventDetails),\n//     });\n//     const data = await response.json();\n//     // Optionally, you can update the events state here\n//     dispatch(setEvents(data));\n//   } catch (error) {\n//     dispatch(setError(error.message));\n//   } finally {\n//     dispatch(setLoading(false));\n//   }\n// });\n// // Update Event\n// export const updateEvent = createAsyncThunk('eventOwner/updateEvent', async ({ eventId, eventDetails }, { dispatch }) => {\n//   dispatch(setLoading(true));\n//   try {\n//     const response = await fetch(`/api/events/${eventId}`, {\n//       method: 'PUT',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(eventDetails),\n//     });\n//     const data = await response.json();\n//     // Handle updated events state if needed\n//     dispatch(setEvents(data));\n//   } catch (error) {\n//     dispatch(setError(error.message));\n//   } finally {\n//     dispatch(setLoading(false));\n//   }\n// });\n// // Delete Event\n// export const deleteEvent = createAsyncThunk('eventOwner/deleteEvent', async (eventId, { dispatch }) => {\n//   dispatch(setLoading(true));\n//   try {\n//     await fetch(`/api/events/${eventId}`, {\n//       method: 'DELETE',\n//     });\n//     // Optionally, update the events state here\n//     dispatch(fetchBookings()); // Refresh bookings or events\n//   } catch (error) {\n//     dispatch(setError(error.message));\n//   } finally {\n//     dispatch(setLoading(false));\n//   }\n// });\n// // Update Profile\n// export const updateProfile = createAsyncThunk('eventOwner/updateProfile', async (profileDetails, { dispatch }) => {\n//   dispatch(setLoading(true));\n//   try {\n//     const response = await fetch('/api/profile', {\n//       method: 'PUT',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(profileDetails),\n//     });\n//     const data = await response.json();\n//     // Handle updated profile state if needed\n//   } catch (error) {\n//     dispatch(setError(error.message));\n//   } finally {\n//     dispatch(setLoading(false));\n//   }\n// });\n// // Create Ticket\n// export const createTicket = createAsyncThunk('eventOwner/createTicket', async (ticketDetails, { dispatch }) => {\n//   dispatch(setLoading(true));\n//   try {\n//     const response = await fetch('/api/tickets', {\n//       method: 'POST',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(ticketDetails),\n//     });\n//     const data = await response.json();\n//     // Handle tickets state if needed\n//     dispatch(setTickets(data));\n//   } catch (error) {\n//     dispatch(setError(error.message));\n//   } finally {\n//     dispatch(setLoading(false));\n//   }\n// });\n// // Update Ticket\n// export const updateTicket = createAsyncThunk('eventOwner/updateTicket', async ({ ticketId, ticketDetails }, { dispatch }) => {\n//   dispatch(setLoading(true));\n//   try {\n//     const response = await fetch(`/api/tickets/${ticketId}`, {\n//       method: 'PUT',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(ticketDetails),\n//     });\n//     const data = await response.json();\n//     // Handle updated tickets state if needed\n//     dispatch(setTickets(data));\n//   } catch (error) {\n//     dispatch(setError(error.message));\n//   } finally {\n//     dispatch(setLoading(false));\n//   }\n// });\n// // Delete Ticket\n// export const deleteTicket = createAsyncThunk('eventOwner/deleteTicket', async (ticketId, { dispatch }) => {\n//   dispatch(setLoading(true));\n//   try {\n//     await fetch(`/api/tickets/${ticketId}`, {\n//       method: 'DELETE',\n//     });\n//     // Optionally, refresh tickets or bookings\n//   } catch (error) {\n//     dispatch(setError(error.message));\n//   } finally {\n//     dispatch(setLoading(false));\n//   }\n// });","map":{"version":3,"names":["fetchEvents","fetchBookings","fetchFeedbacks"],"sources":["E:/Final Year project/Event Hub/Frontend/abhijeetproject/src/features/eventOwner/eventOwnerActions.js"],"sourcesContent":["import { fetchEvents, fetchBookings, fetchFeedbacks } from './eventOwnerSlice';\r\n\r\nexport {\r\n    fetchEvents,\r\n    fetchBookings,\r\n    fetchFeedbacks\r\n};\r\n\r\n// import { createAsyncThunk } from '@reduxjs/toolkit';\r\n// import {\r\n//   setLoading,\r\n//   setError,\r\n//   viewBookings,\r\n//   viewFeedbacks,\r\n//   setEvents,\r\n//   setTickets,\r\n// } from './eventOwnerSlice';\r\n\r\n// // Fetch Bookings\r\n// export const fetchBookings = createAsyncThunk('eventOwner/fetchBookings', async (eventId, { dispatch }) => {\r\n//   dispatch(setLoading(true));\r\n//   try {\r\n//     const response = await fetch(`/api/bookings/${eventId}`);\r\n//     const data = await response.json();\r\n//     dispatch(viewBookings(data));\r\n//   } catch (error) {\r\n//     dispatch(setError(error.message));\r\n//   } finally {\r\n//     dispatch(setLoading(false));\r\n//   }\r\n// });\r\n\r\n// // Fetch Feedbacks\r\n// export const fetchFeedbacks = createAsyncThunk('eventOwner/fetchFeedbacks', async (eventId, { dispatch }) => {\r\n//   dispatch(setLoading(true));\r\n//   try {\r\n//     const response = await fetch(`/api/feedbacks/${eventId}`);\r\n//     const data = await response.json();\r\n//     dispatch(viewFeedbacks(data));\r\n//   } catch (error) {\r\n//     dispatch(setError(error.message));\r\n//   } finally {\r\n//     dispatch(setLoading(false));\r\n//   }\r\n// });\r\n\r\n// // Create Event\r\n// export const createEvent = createAsyncThunk('eventOwner/createEvent', async (eventDetails, { dispatch }) => {\r\n//   dispatch(setLoading(true));\r\n//   try {\r\n//     const response = await fetch('/api/events', {\r\n//       method: 'POST',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify(eventDetails),\r\n//     });\r\n//     const data = await response.json();\r\n//     // Optionally, you can update the events state here\r\n//     dispatch(setEvents(data));\r\n//   } catch (error) {\r\n//     dispatch(setError(error.message));\r\n//   } finally {\r\n//     dispatch(setLoading(false));\r\n//   }\r\n// });\r\n\r\n// // Update Event\r\n// export const updateEvent = createAsyncThunk('eventOwner/updateEvent', async ({ eventId, eventDetails }, { dispatch }) => {\r\n//   dispatch(setLoading(true));\r\n//   try {\r\n//     const response = await fetch(`/api/events/${eventId}`, {\r\n//       method: 'PUT',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify(eventDetails),\r\n//     });\r\n//     const data = await response.json();\r\n//     // Handle updated events state if needed\r\n//     dispatch(setEvents(data));\r\n//   } catch (error) {\r\n//     dispatch(setError(error.message));\r\n//   } finally {\r\n//     dispatch(setLoading(false));\r\n//   }\r\n// });\r\n\r\n// // Delete Event\r\n// export const deleteEvent = createAsyncThunk('eventOwner/deleteEvent', async (eventId, { dispatch }) => {\r\n//   dispatch(setLoading(true));\r\n//   try {\r\n//     await fetch(`/api/events/${eventId}`, {\r\n//       method: 'DELETE',\r\n//     });\r\n//     // Optionally, update the events state here\r\n//     dispatch(fetchBookings()); // Refresh bookings or events\r\n//   } catch (error) {\r\n//     dispatch(setError(error.message));\r\n//   } finally {\r\n//     dispatch(setLoading(false));\r\n//   }\r\n// });\r\n\r\n// // Update Profile\r\n// export const updateProfile = createAsyncThunk('eventOwner/updateProfile', async (profileDetails, { dispatch }) => {\r\n//   dispatch(setLoading(true));\r\n//   try {\r\n//     const response = await fetch('/api/profile', {\r\n//       method: 'PUT',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify(profileDetails),\r\n//     });\r\n//     const data = await response.json();\r\n//     // Handle updated profile state if needed\r\n//   } catch (error) {\r\n//     dispatch(setError(error.message));\r\n//   } finally {\r\n//     dispatch(setLoading(false));\r\n//   }\r\n// });\r\n\r\n// // Create Ticket\r\n// export const createTicket = createAsyncThunk('eventOwner/createTicket', async (ticketDetails, { dispatch }) => {\r\n//   dispatch(setLoading(true));\r\n//   try {\r\n//     const response = await fetch('/api/tickets', {\r\n//       method: 'POST',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify(ticketDetails),\r\n//     });\r\n//     const data = await response.json();\r\n//     // Handle tickets state if needed\r\n//     dispatch(setTickets(data));\r\n//   } catch (error) {\r\n//     dispatch(setError(error.message));\r\n//   } finally {\r\n//     dispatch(setLoading(false));\r\n//   }\r\n// });\r\n\r\n// // Update Ticket\r\n// export const updateTicket = createAsyncThunk('eventOwner/updateTicket', async ({ ticketId, ticketDetails }, { dispatch }) => {\r\n//   dispatch(setLoading(true));\r\n//   try {\r\n//     const response = await fetch(`/api/tickets/${ticketId}`, {\r\n//       method: 'PUT',\r\n//       headers: {\r\n//         'Content-Type': 'application/json',\r\n//       },\r\n//       body: JSON.stringify(ticketDetails),\r\n//     });\r\n//     const data = await response.json();\r\n//     // Handle updated tickets state if needed\r\n//     dispatch(setTickets(data));\r\n//   } catch (error) {\r\n//     dispatch(setError(error.message));\r\n//   } finally {\r\n//     dispatch(setLoading(false));\r\n//   }\r\n// });\r\n\r\n// // Delete Ticket\r\n// export const deleteTicket = createAsyncThunk('eventOwner/deleteTicket', async (ticketId, { dispatch }) => {\r\n//   dispatch(setLoading(true));\r\n//   try {\r\n//     await fetch(`/api/tickets/${ticketId}`, {\r\n//       method: 'DELETE',\r\n//     });\r\n//     // Optionally, refresh tickets or bookings\r\n//   } catch (error) {\r\n//     dispatch(setError(error.message));\r\n//   } finally {\r\n//     dispatch(setLoading(false));\r\n//   }\r\n// });\r\n"],"mappings":"AAAA,OAASA,WAAW,CAAEC,aAAa,CAAEC,cAAc,KAAQ,mBAAmB,CAE9E,OACIF,WAAW,CACXC,aAAa,CACbC,cAAc,EAGlignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}