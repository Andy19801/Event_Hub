{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n// Define an initial state\nconst initialState = {\n  token: null,\n  user: null,\n  loading: false,\n  error: null\n};\n\n// Async thunk for login\nexport const loginUser = createAsyncThunk('auth/login', async credentials => {\n  const response = await axios.post('/api/auth/login', credentials);\n  return response.data; // Assumes the response contains { token, user }\n});\n\n// Async thunk for logout\nexport const logoutUser = createAsyncThunk('auth/logout', async () => {\n  return null; // Return null to reset the state\n});\n\n// Create the auth slice\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout: state => {\n      state.token = null;\n      state.user = null;\n    },\n    setCredentials: (state, action) => {\n      const {\n        token,\n        user\n      } = action.payload;\n      state.token = token;\n      state.user = user;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(loginUser.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(loginUser.fulfilled, (state, action) => {\n      state.loading = false;\n      state.token = action.payload.token;\n      state.user = action.payload.user;\n    }).addCase(loginUser.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.error.message;\n    }).addCase(logoutUser.fulfilled, state => {\n      state.token = null;\n      state.user = null;\n    });\n  }\n});\n\n// Export the actions and reducer\nexport const {\n  logout,\n  setCredentials\n} = authSlice.actions; // Include setCredentials\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","initialState","token","user","loading","error","loginUser","credentials","response","post","data","logoutUser","authSlice","name","reducers","logout","state","setCredentials","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","message","actions","reducer"],"sources":["E:/Final Year project/Event Hub/Frontend/abhijeetproject/src/features/auth/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\n// Define an initial state\r\nconst initialState = {\r\n  token: null,\r\n  user: null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\n// Async thunk for login\r\nexport const loginUser = createAsyncThunk('auth/login', async (credentials) => {\r\n  const response = await axios.post('/api/auth/login', credentials);\r\n  return response.data; // Assumes the response contains { token, user }\r\n});\r\n\r\n// Async thunk for logout\r\nexport const logoutUser = createAsyncThunk('auth/logout', async () => {\r\n  return null; // Return null to reset the state\r\n});\r\n\r\n// Create the auth slice\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    logout: (state) => {\r\n      state.token = null;\r\n      state.user = null;\r\n    },\r\n    setCredentials: (state, action) => {\r\n      const { token, user } = action.payload;\r\n      state.token = token;\r\n      state.user = user;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(loginUser.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(loginUser.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.token = action.payload.token;\r\n        state.user = action.payload.user;\r\n      })\r\n      .addCase(loginUser.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.error.message;\r\n      })\r\n      .addCase(logoutUser.fulfilled, (state) => {\r\n        state.token = null;\r\n        state.user = null;\r\n      });\r\n  },\r\n});\r\n\r\n// Export the actions and reducer\r\nexport const { logout, setCredentials } = authSlice.actions; // Include setCredentials\r\nexport default authSlice.reducer;\r\n\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,IAAI;EACXC,IAAI,EAAE,IAAI;EACVC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,OAAO,MAAMC,SAAS,GAAGP,gBAAgB,CAAC,YAAY,EAAE,MAAOQ,WAAW,IAAK;EAC7E,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,IAAI,CAAC,iBAAiB,EAAEF,WAAW,CAAC;EACjE,OAAOC,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,UAAU,GAAGZ,gBAAgB,CAAC,aAAa,EAAE,YAAY;EACpE,OAAO,IAAI,CAAC,CAAC;AACf,CAAC,CAAC;;AAEF;AACA,MAAMa,SAAS,GAAGd,WAAW,CAAC;EAC5Be,IAAI,EAAE,MAAM;EACZZ,YAAY;EACZa,QAAQ,EAAE;IACRC,MAAM,EAAGC,KAAK,IAAK;MACjBA,KAAK,CAACd,KAAK,GAAG,IAAI;MAClBc,KAAK,CAACb,IAAI,GAAG,IAAI;IACnB,CAAC;IACDc,cAAc,EAAEA,CAACD,KAAK,EAAEE,MAAM,KAAK;MACjC,MAAM;QAAEhB,KAAK;QAAEC;MAAK,CAAC,GAAGe,MAAM,CAACC,OAAO;MACtCH,KAAK,CAACd,KAAK,GAAGA,KAAK;MACnBc,KAAK,CAACb,IAAI,GAAGA,IAAI;IACnB;EACF,CAAC;EACDiB,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAChB,SAAS,CAACiB,OAAO,EAAGP,KAAK,IAAK;MACrCA,KAAK,CAACZ,OAAO,GAAG,IAAI;MACpBY,KAAK,CAACX,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDiB,OAAO,CAAChB,SAAS,CAACkB,SAAS,EAAE,CAACR,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAACZ,OAAO,GAAG,KAAK;MACrBY,KAAK,CAACd,KAAK,GAAGgB,MAAM,CAACC,OAAO,CAACjB,KAAK;MAClCc,KAAK,CAACb,IAAI,GAAGe,MAAM,CAACC,OAAO,CAAChB,IAAI;IAClC,CAAC,CAAC,CACDmB,OAAO,CAAChB,SAAS,CAACmB,QAAQ,EAAE,CAACT,KAAK,EAAEE,MAAM,KAAK;MAC9CF,KAAK,CAACZ,OAAO,GAAG,KAAK;MACrBY,KAAK,CAACX,KAAK,GAAGa,MAAM,CAACb,KAAK,CAACqB,OAAO;IACpC,CAAC,CAAC,CACDJ,OAAO,CAACX,UAAU,CAACa,SAAS,EAAGR,KAAK,IAAK;MACxCA,KAAK,CAACd,KAAK,GAAG,IAAI;MAClBc,KAAK,CAACb,IAAI,GAAG,IAAI;IACnB,CAAC,CAAC;EACN;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEY,MAAM;EAAEE;AAAe,CAAC,GAAGL,SAAS,CAACe,OAAO,CAAC,CAAC;AAC7D,eAAef,SAAS,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}