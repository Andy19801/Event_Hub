{"ast":null,"code":"// src/features/admin/adminActions.js\nimport{createAsyncThunk}from'@reduxjs/toolkit';import axios from'axios';// Action to fetch users (GET request)\nexport const fetchUsers=createAsyncThunk('admin/fetchUsers',async(_,_ref)=>{let{rejectWithValue}=_ref;try{const response=await axios.get('/api/admin/users');return response.data;// Returning the user data\n}catch(error){return rejectWithValue(error.response.data.message);// Handling error with rejection\n}});// Action to delete a user (DELETE request)\nexport const deleteUser=createAsyncThunk('admin/deleteUser',async(userId,_ref2)=>{let{rejectWithValue}=_ref2;try{await axios.delete(`/api/admin/users/${userId}`);return userId;// Returning userId to remove it from the local state\n}catch(error){return rejectWithValue(error.response.data.message);// Handling error with rejection\n}});// Action to reset errors in admin state\nexport const resetError=()=>{return dispatch=>{dispatch({type:'admin/resetError'});};};// // Import necessary actions from the adminSlice\n// import { fetchAdminData, approveEvent, fetchUserDetails } from './adminSlice';\n// // Action to refresh admin dashboard data\n// export const refreshAdminData = () => async (dispatch) => {\n//     try {\n//         await dispatch(fetchAdminData()).unwrap();\n//     } catch (error) {\n//         console.error(\"Failed to refresh admin data:\", error);\n//     }\n// };\n// // Action to approve an event by its ID\n// export const approveEventAction = (eventId) => async (dispatch) => {\n//     try {\n//         await dispatch(approveEvent(eventId)).unwrap();\n//     } catch (error) {\n//         console.error(`Failed to approve event with ID: ${eventId}`, error);\n//     }\n// };\n// // Action to fetch user details\n// export const fetchUserDetailsAction = () => async (dispatch) => {\n//     try {\n//         await dispatch(fetchUserDetails()).unwrap();\n//     } catch (error) {\n//         console.error(\"Failed to fetch user details:\", error);\n//     }\n// };","map":{"version":3,"names":["createAsyncThunk","axios","fetchUsers","_","_ref","rejectWithValue","response","get","data","error","message","deleteUser","userId","_ref2","delete","resetError","dispatch","type"],"sources":["E:/Final Year project/Event Hub/Frontend/abhijeetproject/src/features/admin/adminActions.js"],"sourcesContent":["// src/features/admin/adminActions.js\r\n\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\n// Action to fetch users (GET request)\r\nexport const fetchUsers = createAsyncThunk('admin/fetchUsers', async (_, { rejectWithValue }) => {\r\n    try {\r\n        const response = await axios.get('/api/admin/users');\r\n        return response.data;  // Returning the user data\r\n    } catch (error) {\r\n        return rejectWithValue(error.response.data.message);  // Handling error with rejection\r\n    }\r\n});\r\n\r\n// Action to delete a user (DELETE request)\r\nexport const deleteUser = createAsyncThunk('admin/deleteUser', async (userId, { rejectWithValue }) => {\r\n    try {\r\n        await axios.delete(`/api/admin/users/${userId}`);\r\n        return userId;  // Returning userId to remove it from the local state\r\n    } catch (error) {\r\n        return rejectWithValue(error.response.data.message);  // Handling error with rejection\r\n    }\r\n});\r\n\r\n// Action to reset errors in admin state\r\nexport const resetError = () => {\r\n    return (dispatch) => {\r\n        dispatch({ type: 'admin/resetError' });\r\n    };\r\n};\r\n\r\n\r\n// // Import necessary actions from the adminSlice\r\n// import { fetchAdminData, approveEvent, fetchUserDetails } from './adminSlice';\r\n\r\n// // Action to refresh admin dashboard data\r\n// export const refreshAdminData = () => async (dispatch) => {\r\n//     try {\r\n//         await dispatch(fetchAdminData()).unwrap();\r\n//     } catch (error) {\r\n//         console.error(\"Failed to refresh admin data:\", error);\r\n//     }\r\n// };\r\n\r\n// // Action to approve an event by its ID\r\n// export const approveEventAction = (eventId) => async (dispatch) => {\r\n//     try {\r\n//         await dispatch(approveEvent(eventId)).unwrap();\r\n//     } catch (error) {\r\n//         console.error(`Failed to approve event with ID: ${eventId}`, error);\r\n//     }\r\n// };\r\n\r\n// // Action to fetch user details\r\n// export const fetchUserDetailsAction = () => async (dispatch) => {\r\n//     try {\r\n//         await dispatch(fetchUserDetails()).unwrap();\r\n//     } catch (error) {\r\n//         console.error(\"Failed to fetch user details:\", error);\r\n//     }\r\n// };\r\n"],"mappings":"AAAA;AAEA,OAASA,gBAAgB,KAAQ,kBAAkB,CACnD,MAAO,CAAAC,KAAK,KAAM,OAAO,CAEzB;AACA,MAAO,MAAM,CAAAC,UAAU,CAAGF,gBAAgB,CAAC,kBAAkB,CAAE,MAAOG,CAAC,CAAAC,IAAA,GAA0B,IAAxB,CAAEC,eAAgB,CAAC,CAAAD,IAAA,CACxF,GAAI,CACA,KAAM,CAAAE,QAAQ,CAAG,KAAM,CAAAL,KAAK,CAACM,GAAG,CAAC,kBAAkB,CAAC,CACpD,MAAO,CAAAD,QAAQ,CAACE,IAAI,CAAG;AAC3B,CAAE,MAAOC,KAAK,CAAE,CACZ,MAAO,CAAAJ,eAAe,CAACI,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACE,OAAO,CAAC,CAAG;AAC1D,CACJ,CAAC,CAAC,CAEF;AACA,MAAO,MAAM,CAAAC,UAAU,CAAGX,gBAAgB,CAAC,kBAAkB,CAAE,MAAOY,MAAM,CAAAC,KAAA,GAA0B,IAAxB,CAAER,eAAgB,CAAC,CAAAQ,KAAA,CAC7F,GAAI,CACA,KAAM,CAAAZ,KAAK,CAACa,MAAM,CAAC,oBAAoBF,MAAM,EAAE,CAAC,CAChD,MAAO,CAAAA,MAAM,CAAG;AACpB,CAAE,MAAOH,KAAK,CAAE,CACZ,MAAO,CAAAJ,eAAe,CAACI,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACE,OAAO,CAAC,CAAG;AAC1D,CACJ,CAAC,CAAC,CAEF;AACA,MAAO,MAAM,CAAAK,UAAU,CAAGA,CAAA,GAAM,CAC5B,MAAQ,CAAAC,QAAQ,EAAK,CACjBA,QAAQ,CAAC,CAAEC,IAAI,CAAE,kBAAmB,CAAC,CAAC,CAC1C,CAAC,CACL,CAAC,CAGD;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}