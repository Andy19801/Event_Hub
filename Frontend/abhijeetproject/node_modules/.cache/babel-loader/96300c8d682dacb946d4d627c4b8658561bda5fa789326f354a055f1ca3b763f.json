{"ast":null,"code":"import axios from 'axios';\nimport { FETCH_USERS_REQUEST, FETCH_USERS_SUCCESS, FETCH_USERS_FAILURE, DELETE_USER_REQUEST, DELETE_USER_SUCCESS, DELETE_USER_FAILURE, RESET_ERROR } from './adminTypes';\n\n// Action to fetch users\nexport const fetchUsers = () => async dispatch => {\n  try {\n    dispatch({\n      type: FETCH_USERS_REQUEST\n    });\n    const {\n      data\n    } = await axios.get('http://localhost:5000/api/admin/users', {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    dispatch({\n      type: FETCH_USERS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: FETCH_USERS_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n// Action to delete a user\nexport const deleteUser = id => async dispatch => {\n  try {\n    dispatch({\n      type: DELETE_USER_REQUEST\n    });\n    await axios.delete(`http://localhost:5000/api/admin/users/${id}`, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    });\n    dispatch({\n      type: DELETE_USER_SUCCESS,\n      payload: id // Send back the deleted user ID to update the state\n    });\n  } catch (error) {\n    dispatch({\n      type: DELETE_USER_FAILURE,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\n\n// Action to reset error\nexport const resetError = () => dispatch => {\n  dispatch({\n    type: RESET_ERROR\n  });\n};\n\n// // src/features/admin/adminActions.js\n\n// import { createAsyncThunk } from '@reduxjs/toolkit';\n// import axios from 'axios';\n\n// // Action to fetch users (GET request)\n// export const fetchUsers = createAsyncThunk('admin/fetchUsers', async (_, { rejectWithValue }) => {\n//     try {\n//         const response = await axios.get('/api/admin/users');\n//         return response.data;  // Returning the user data\n//     } catch (error) {\n//         return rejectWithValue(error.response.data.message);  // Handling error with rejection\n//     }\n// });\n\n// // Action to delete a user (DELETE request)\n// export const deleteUser = createAsyncThunk('admin/deleteUser', async (userId, { rejectWithValue }) => {\n//     try {\n//         await axios.delete(`/api/admin/users/${userId}`);\n//         return userId;  // Returning userId to remove it from the local state\n//     } catch (error) {\n//         return rejectWithValue(error.response.data.message);  // Handling error with rejection\n//     }\n// });\n\n// // Action to reset errors in admin state\n// export const resetError = () => {\n//     return (dispatch) => {\n//         dispatch({ type: 'admin/resetError' });\n//     };\n// };","map":{"version":3,"names":["axios","FETCH_USERS_REQUEST","FETCH_USERS_SUCCESS","FETCH_USERS_FAILURE","DELETE_USER_REQUEST","DELETE_USER_SUCCESS","DELETE_USER_FAILURE","RESET_ERROR","fetchUsers","dispatch","type","data","get","headers","Authorization","localStorage","getItem","payload","error","response","message","deleteUser","id","delete","resetError"],"sources":["E:/Final Year project/Event Hub/Frontend/abhijeetproject/src/features/admin/adminActions.js"],"sourcesContent":["import axios from 'axios';\r\nimport { \r\n    FETCH_USERS_REQUEST, \r\n    FETCH_USERS_SUCCESS, \r\n    FETCH_USERS_FAILURE,\r\n    DELETE_USER_REQUEST,\r\n    DELETE_USER_SUCCESS,\r\n    DELETE_USER_FAILURE,\r\n    RESET_ERROR\r\n} from './adminTypes';\r\n\r\n// Action to fetch users\r\nexport const fetchUsers = () => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: FETCH_USERS_REQUEST });\r\n\r\n        const { data } = await axios.get('http://localhost:5000/api/admin/users', {\r\n            headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\r\n        });\r\n\r\n        dispatch({\r\n            type: FETCH_USERS_SUCCESS,\r\n            payload: data,\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: FETCH_USERS_FAILURE,\r\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message,\r\n        });\r\n    }\r\n};\r\n\r\n// Action to delete a user\r\nexport const deleteUser = (id) => async (dispatch) => {\r\n    try {\r\n        dispatch({ type: DELETE_USER_REQUEST });\r\n\r\n        await axios.delete(`http://localhost:5000/api/admin/users/${id}`, {\r\n            headers: { Authorization: `Bearer ${localStorage.getItem('token')}` },\r\n        });\r\n\r\n        dispatch({\r\n            type: DELETE_USER_SUCCESS,\r\n            payload: id,  // Send back the deleted user ID to update the state\r\n        });\r\n    } catch (error) {\r\n        dispatch({\r\n            type: DELETE_USER_FAILURE,\r\n            payload: error.response && error.response.data.message ? error.response.data.message : error.message,\r\n        });\r\n    }\r\n};\r\n\r\n// Action to reset error\r\nexport const resetError = () => (dispatch) => {\r\n    dispatch({ type: RESET_ERROR });\r\n};\r\n\r\n\r\n// // src/features/admin/adminActions.js\r\n\r\n// import { createAsyncThunk } from '@reduxjs/toolkit';\r\n// import axios from 'axios';\r\n\r\n// // Action to fetch users (GET request)\r\n// export const fetchUsers = createAsyncThunk('admin/fetchUsers', async (_, { rejectWithValue }) => {\r\n//     try {\r\n//         const response = await axios.get('/api/admin/users');\r\n//         return response.data;  // Returning the user data\r\n//     } catch (error) {\r\n//         return rejectWithValue(error.response.data.message);  // Handling error with rejection\r\n//     }\r\n// });\r\n\r\n// // Action to delete a user (DELETE request)\r\n// export const deleteUser = createAsyncThunk('admin/deleteUser', async (userId, { rejectWithValue }) => {\r\n//     try {\r\n//         await axios.delete(`/api/admin/users/${userId}`);\r\n//         return userId;  // Returning userId to remove it from the local state\r\n//     } catch (error) {\r\n//         return rejectWithValue(error.response.data.message);  // Handling error with rejection\r\n//     }\r\n// });\r\n\r\n// // Action to reset errors in admin state\r\n// export const resetError = () => {\r\n//     return (dispatch) => {\r\n//         dispatch({ type: 'admin/resetError' });\r\n//     };\r\n// };\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACIC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,EACnBC,mBAAmB,EACnBC,WAAW,QACR,cAAc;;AAErB;AACA,OAAO,MAAMC,UAAU,GAAGA,CAAA,KAAM,MAAOC,QAAQ,IAAK;EAChD,IAAI;IACAA,QAAQ,CAAC;MAAEC,IAAI,EAAET;IAAoB,CAAC,CAAC;IAEvC,MAAM;MAAEU;IAAK,CAAC,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,uCAAuC,EAAE;MACtEC,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAAG;IACxE,CAAC,CAAC;IAEFP,QAAQ,CAAC;MACLC,IAAI,EAAER,mBAAmB;MACzBe,OAAO,EAAEN;IACb,CAAC,CAAC;EACN,CAAC,CAAC,OAAOO,KAAK,EAAE;IACZT,QAAQ,CAAC;MACLC,IAAI,EAAEP,mBAAmB;MACzBc,OAAO,EAAEC,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACR,IAAI,CAACS,OAAO,GAAGF,KAAK,CAACC,QAAQ,CAACR,IAAI,CAACS,OAAO,GAAGF,KAAK,CAACE;IACjG,CAAC,CAAC;EACN;AACJ,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAIC,EAAE,IAAK,MAAOb,QAAQ,IAAK;EAClD,IAAI;IACAA,QAAQ,CAAC;MAAEC,IAAI,EAAEN;IAAoB,CAAC,CAAC;IAEvC,MAAMJ,KAAK,CAACuB,MAAM,CAAC,yCAAyCD,EAAE,EAAE,EAAE;MAC9DT,OAAO,EAAE;QAAEC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAAG;IACxE,CAAC,CAAC;IAEFP,QAAQ,CAAC;MACLC,IAAI,EAAEL,mBAAmB;MACzBY,OAAO,EAAEK,EAAE,CAAG;IAClB,CAAC,CAAC;EACN,CAAC,CAAC,OAAOJ,KAAK,EAAE;IACZT,QAAQ,CAAC;MACLC,IAAI,EAAEJ,mBAAmB;MACzBW,OAAO,EAAEC,KAAK,CAACC,QAAQ,IAAID,KAAK,CAACC,QAAQ,CAACR,IAAI,CAACS,OAAO,GAAGF,KAAK,CAACC,QAAQ,CAACR,IAAI,CAACS,OAAO,GAAGF,KAAK,CAACE;IACjG,CAAC,CAAC;EACN;AACJ,CAAC;;AAED;AACA,OAAO,MAAMI,UAAU,GAAGA,CAAA,KAAOf,QAAQ,IAAK;EAC1CA,QAAQ,CAAC;IAAEC,IAAI,EAAEH;EAAY,CAAC,CAAC;AACnC,CAAC;;AAGD;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}