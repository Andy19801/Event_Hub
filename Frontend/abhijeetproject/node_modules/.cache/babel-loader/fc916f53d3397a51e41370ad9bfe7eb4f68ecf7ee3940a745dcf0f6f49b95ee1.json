{"ast":null,"code":"import{createSlice,createAsyncThunk}from'@reduxjs/toolkit';import axios from'axios';// Thunks for async actions\nexport const fetchAdminData=createAsyncThunk('admin/fetchAdminData',async()=>{const response=await axios.get('/api/admin/dashboard');return response.data;});// Approve an event\nexport const approveEvent=createAsyncThunk('admin/approveEvent',async eventId=>{const response=await axios.post(`/api/admin/approve/${eventId}`);return response.data;// Return updated event data\n});// Fetch user details\nexport const fetchUserDetails=createAsyncThunk('admin/fetchUserDetails',async()=>{const response=await axios.get('/api/admin/users');return response.data;// Assuming the response contains user data\n});// Initial state\nconst initialState={dashboardData:null,users:[],loading:false,error:null};// Create the slice\nconst adminSlice=createSlice({name:'admin',initialState,reducers:{},extraReducers:builder=>{builder.addCase(fetchAdminData.pending,state=>{state.loading=true;state.error=null;}).addCase(fetchAdminData.fulfilled,(state,action)=>{state.loading=false;state.dashboardData=action.payload;}).addCase(fetchAdminData.rejected,(state,action)=>{state.loading=false;state.error=action.error.message;}).addCase(approveEvent.fulfilled,(state,action)=>{// Handle the event approval logic, e.g., update the dashboard data\n}).addCase(fetchUserDetails.fulfilled,(state,action)=>{state.users=action.payload;// Update user data\n});}});export default adminSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","fetchAdminData","response","get","data","approveEvent","eventId","post","fetchUserDetails","initialState","dashboardData","users","loading","error","adminSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","reducer"],"sources":["G:/Event Event Hub/Frontend/abhijeetproject/src/features/admin/adminSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\n// Thunks for async actions\r\nexport const fetchAdminData = createAsyncThunk('admin/fetchAdminData', async () => {\r\n    const response = await axios.get('/api/admin/dashboard');\r\n    return response.data;\r\n});\r\n\r\n// Approve an event\r\nexport const approveEvent = createAsyncThunk('admin/approveEvent', async (eventId) => {\r\n    const response = await axios.post(`/api/admin/approve/${eventId}`);\r\n    return response.data; // Return updated event data\r\n});\r\n\r\n// Fetch user details\r\nexport const fetchUserDetails = createAsyncThunk('admin/fetchUserDetails', async () => {\r\n    const response = await axios.get('/api/admin/users');\r\n    return response.data; // Assuming the response contains user data\r\n});\r\n\r\n// Initial state\r\nconst initialState = {\r\n    dashboardData: null,\r\n    users: [],\r\n    loading: false,\r\n    error: null,\r\n};\r\n\r\n// Create the slice\r\nconst adminSlice = createSlice({\r\n    name: 'admin',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addCase(fetchAdminData.pending, (state) => {\r\n                state.loading = true;\r\n                state.error = null;\r\n            })\r\n            .addCase(fetchAdminData.fulfilled, (state, action) => {\r\n                state.loading = false;\r\n                state.dashboardData = action.payload;\r\n            })\r\n            .addCase(fetchAdminData.rejected, (state, action) => {\r\n                state.loading = false;\r\n                state.error = action.error.message;\r\n            })\r\n            .addCase(approveEvent.fulfilled, (state, action) => {\r\n                // Handle the event approval logic, e.g., update the dashboard data\r\n            })\r\n            .addCase(fetchUserDetails.fulfilled, (state, action) => {\r\n                state.users = action.payload; // Update user data\r\n            });\r\n    },\r\n});\r\n\r\nexport default adminSlice.reducer;\r\n"],"mappings":"AAAA,OAASA,WAAW,CAAEC,gBAAgB,KAAQ,kBAAkB,CAChE,MAAO,CAAAC,KAAK,KAAM,OAAO,CAEzB;AACA,MAAO,MAAM,CAAAC,cAAc,CAAGF,gBAAgB,CAAC,sBAAsB,CAAE,SAAY,CAC/E,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAF,KAAK,CAACG,GAAG,CAAC,sBAAsB,CAAC,CACxD,MAAO,CAAAD,QAAQ,CAACE,IAAI,CACxB,CAAC,CAAC,CAEF;AACA,MAAO,MAAM,CAAAC,YAAY,CAAGN,gBAAgB,CAAC,oBAAoB,CAAE,KAAO,CAAAO,OAAO,EAAK,CAClF,KAAM,CAAAJ,QAAQ,CAAG,KAAM,CAAAF,KAAK,CAACO,IAAI,CAAC,sBAAsBD,OAAO,EAAE,CAAC,CAClE,MAAO,CAAAJ,QAAQ,CAACE,IAAI,CAAE;AAC1B,CAAC,CAAC,CAEF;AACA,MAAO,MAAM,CAAAI,gBAAgB,CAAGT,gBAAgB,CAAC,wBAAwB,CAAE,SAAY,CACnF,KAAM,CAAAG,QAAQ,CAAG,KAAM,CAAAF,KAAK,CAACG,GAAG,CAAC,kBAAkB,CAAC,CACpD,MAAO,CAAAD,QAAQ,CAACE,IAAI,CAAE;AAC1B,CAAC,CAAC,CAEF;AACA,KAAM,CAAAK,YAAY,CAAG,CACjBC,aAAa,CAAE,IAAI,CACnBC,KAAK,CAAE,EAAE,CACTC,OAAO,CAAE,KAAK,CACdC,KAAK,CAAE,IACX,CAAC,CAED;AACA,KAAM,CAAAC,UAAU,CAAGhB,WAAW,CAAC,CAC3BiB,IAAI,CAAE,OAAO,CACbN,YAAY,CACZO,QAAQ,CAAE,CAAC,CAAC,CACZC,aAAa,CAAGC,OAAO,EAAK,CACxBA,OAAO,CACFC,OAAO,CAAClB,cAAc,CAACmB,OAAO,CAAGC,KAAK,EAAK,CACxCA,KAAK,CAACT,OAAO,CAAG,IAAI,CACpBS,KAAK,CAACR,KAAK,CAAG,IAAI,CACtB,CAAC,CAAC,CACDM,OAAO,CAAClB,cAAc,CAACqB,SAAS,CAAE,CAACD,KAAK,CAAEE,MAAM,GAAK,CAClDF,KAAK,CAACT,OAAO,CAAG,KAAK,CACrBS,KAAK,CAACX,aAAa,CAAGa,MAAM,CAACC,OAAO,CACxC,CAAC,CAAC,CACDL,OAAO,CAAClB,cAAc,CAACwB,QAAQ,CAAE,CAACJ,KAAK,CAAEE,MAAM,GAAK,CACjDF,KAAK,CAACT,OAAO,CAAG,KAAK,CACrBS,KAAK,CAACR,KAAK,CAAGU,MAAM,CAACV,KAAK,CAACa,OAAO,CACtC,CAAC,CAAC,CACDP,OAAO,CAACd,YAAY,CAACiB,SAAS,CAAE,CAACD,KAAK,CAAEE,MAAM,GAAK,CAChD;AAAA,CACH,CAAC,CACDJ,OAAO,CAACX,gBAAgB,CAACc,SAAS,CAAE,CAACD,KAAK,CAAEE,MAAM,GAAK,CACpDF,KAAK,CAACV,KAAK,CAAGY,MAAM,CAACC,OAAO,CAAE;AAClC,CAAC,CAAC,CACV,CACJ,CAAC,CAAC,CAEF,cAAe,CAAAV,UAAU,CAACa,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}