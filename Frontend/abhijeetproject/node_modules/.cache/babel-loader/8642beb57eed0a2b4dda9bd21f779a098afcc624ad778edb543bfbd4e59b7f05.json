{"ast":null,"code":"// import { createSlice } from '@reduxjs/toolkit';\n\n// const initialState = {\n//   count: 0, // Initial counter value\n// };\n\n// const counterSlice = createSlice({\n//   name: 'counter',\n//   initialState,\n//   reducers: {\n//     increment: (state) => {\n//       state.count += 1; // Increment the counter\n//     },\n//     decrement: (state) => {\n//       state.count -= 1; // Decrement the counter\n//     },\n//     reset: (state) => {\n//       state.count = 0; // Reset the counter to 0\n//     },\n//     toggleTrueFalseOnLogin: (state, action) => {\n//       state.value = action.payload; // Toggle value based on login status\n//     },\n//   },\n// });\n\n// // Export actions\n// export const { increment, decrement, reset, toggleTrueFalseOnLogin } = counterSlice.actions;\n\n// // Export the reducer\n// export default counterSlice.reducer;","map":{"version":3,"names":[],"sources":["E:/Final Year project/Event Hub/Frontend/abhijeetproject/src/features/counter/counterSlice.js"],"sourcesContent":["// import { createSlice } from '@reduxjs/toolkit';\r\n\r\n// const initialState = {\r\n//   count: 0, // Initial counter value\r\n// };\r\n\r\n// const counterSlice = createSlice({\r\n//   name: 'counter',\r\n//   initialState,\r\n//   reducers: {\r\n//     increment: (state) => {\r\n//       state.count += 1; // Increment the counter\r\n//     },\r\n//     decrement: (state) => {\r\n//       state.count -= 1; // Decrement the counter\r\n//     },\r\n//     reset: (state) => {\r\n//       state.count = 0; // Reset the counter to 0\r\n//     },\r\n//     toggleTrueFalseOnLogin: (state, action) => {\r\n//       state.value = action.payload; // Toggle value based on login status\r\n//     },\r\n//   },\r\n// });\r\n\r\n// // Export actions\r\n// export const { increment, decrement, reset, toggleTrueFalseOnLogin } = counterSlice.actions;\r\n\r\n// // Export the reducer\r\n// export default counterSlice.reducer;\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}