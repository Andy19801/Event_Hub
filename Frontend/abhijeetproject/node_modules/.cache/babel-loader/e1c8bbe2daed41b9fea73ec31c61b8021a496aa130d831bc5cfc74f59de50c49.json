{"ast":null,"code":"// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n// import axios from 'axios';\n\n// // Define an initial state\n// const initialState = {\n//   token: null,\n//   user: null,\n//   loading: false,\n//   error: null,\n// };\n\n// // Async thunk for login\n// export const loginUser = createAsyncThunk('auth/login', async (credentials) => {\n//   const response = await axios.post('/api/auth/login', credentials);\n//   return response.data; // Assumes the response contains { token, user }\n// });\n\n// // Async thunk for logout\n// export const logoutUser = createAsyncThunk('auth/logout', async () => {\n//   return null; // Return null to reset the state\n// });\n\n// // Create the auth slice\n// const authSlice = createSlice({\n//   name: 'auth',\n//   initialState,\n//   reducers: {\n//     logout: (state) => {\n//       state.token = null;\n//       state.user = null;\n//     },\n//     setCredentials: (state, action) => {\n//       const { token, user } = action.payload;\n//       state.token = token;\n//       state.user = user;\n//     },\n//   },\n//   extraReducers: (builder) => {\n//     builder\n//       .addCase(loginUser.pending, (state) => {\n//         state.loading = true;\n//         state.error = null;\n//       })\n//       .addCase(loginUser.fulfilled, (state, action) => {\n//         state.loading = false;\n//         state.token = action.payload.token;\n//         state.user = action.payload.user;\n//       })\n//       .addCase(loginUser.rejected, (state, action) => {\n//         state.loading = false;\n//         state.error = action.error.message;\n//       })\n//       .addCase(logoutUser.fulfilled, (state) => {\n//         state.token = null;\n//         state.user = null;\n//       });\n//   },\n// });\n\n// // Export the actions and reducer\n// export const { logout, setCredentials } = authSlice.actions; // Include setCredentials\n// export default authSlice.reducer;","map":{"version":3,"names":[],"sources":["E:/Final Year project/Event Hub/Frontend/abhijeetproject/src/features/auth/authSlice.js"],"sourcesContent":["// import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n// import axios from 'axios';\r\n\r\n// // Define an initial state\r\n// const initialState = {\r\n//   token: null,\r\n//   user: null,\r\n//   loading: false,\r\n//   error: null,\r\n// };\r\n\r\n// // Async thunk for login\r\n// export const loginUser = createAsyncThunk('auth/login', async (credentials) => {\r\n//   const response = await axios.post('/api/auth/login', credentials);\r\n//   return response.data; // Assumes the response contains { token, user }\r\n// });\r\n\r\n// // Async thunk for logout\r\n// export const logoutUser = createAsyncThunk('auth/logout', async () => {\r\n//   return null; // Return null to reset the state\r\n// });\r\n\r\n// // Create the auth slice\r\n// const authSlice = createSlice({\r\n//   name: 'auth',\r\n//   initialState,\r\n//   reducers: {\r\n//     logout: (state) => {\r\n//       state.token = null;\r\n//       state.user = null;\r\n//     },\r\n//     setCredentials: (state, action) => {\r\n//       const { token, user } = action.payload;\r\n//       state.token = token;\r\n//       state.user = user;\r\n//     },\r\n//   },\r\n//   extraReducers: (builder) => {\r\n//     builder\r\n//       .addCase(loginUser.pending, (state) => {\r\n//         state.loading = true;\r\n//         state.error = null;\r\n//       })\r\n//       .addCase(loginUser.fulfilled, (state, action) => {\r\n//         state.loading = false;\r\n//         state.token = action.payload.token;\r\n//         state.user = action.payload.user;\r\n//       })\r\n//       .addCase(loginUser.rejected, (state, action) => {\r\n//         state.loading = false;\r\n//         state.error = action.error.message;\r\n//       })\r\n//       .addCase(logoutUser.fulfilled, (state) => {\r\n//         state.token = null;\r\n//         state.user = null;\r\n//       });\r\n//   },\r\n// });\r\n\r\n// // Export the actions and reducer\r\n// export const { logout, setCredentials } = authSlice.actions; // Include setCredentials\r\n// export default authSlice.reducer;\r\n\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}