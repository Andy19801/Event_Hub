{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toKeyAlias;\nvar _index = require(\"../validators/generated/index.js\");\nvar _cloneNode = require(\"../clone/cloneNode.js\");\nvar _removePropertiesDeep = require(\"../modifications/removePropertiesDeep.js\");\nfunction toKeyAlias(node) {\n  let key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : node.key;\n  let alias;\n  if (node.kind === \"method\") {\n    return toKeyAlias.increment() + \"\";\n  } else if ((0, _index.isIdentifier)(key)) {\n    alias = key.name;\n  } else if ((0, _index.isStringLiteral)(key)) {\n    alias = JSON.stringify(key.value);\n  } else {\n    alias = JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key)));\n  }\n  if (node.computed) {\n    alias = `[${alias}]`;\n  }\n  if (node.static) {\n    alias = `static:${alias}`;\n  }\n  return alias;\n}\ntoKeyAlias.uid = 0;\ntoKeyAlias.increment = function () {\n  if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {\n    return toKeyAlias.uid = 0;\n  } else {\n    return toKeyAlias.uid++;\n  }\n};","map":{"version":3,"names":["_index","require","_cloneNode","_removePropertiesDeep","toKeyAlias","node","key","arguments","length","undefined","alias","kind","increment","isIdentifier","name","isStringLiteral","JSON","stringify","value","default","computed","static","uid","Number","MAX_SAFE_INTEGER"],"sources":["G:\\Event Event Hub\\Frontend\\abhijeetproject\\node_modules\\@babel\\types\\src\\converters\\toKeyAlias.ts"],"sourcesContent":["import {\n  isIdentifier,\n  isStringLiteral,\n} from \"../validators/generated/index.ts\";\nimport cloneNode from \"../clone/cloneNode.ts\";\nimport removePropertiesDeep from \"../modifications/removePropertiesDeep.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function toKeyAlias(\n  node: t.Method | t.Property,\n  key: t.Node = node.key,\n): string {\n  let alias;\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.kind`\n  if (node.kind === \"method\") {\n    return toKeyAlias.increment() + \"\";\n  } else if (isIdentifier(key)) {\n    alias = key.name;\n  } else if (isStringLiteral(key)) {\n    alias = JSON.stringify(key.value);\n  } else {\n    alias = JSON.stringify(removePropertiesDeep(cloneNode(key)));\n  }\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.computed`\n  if (node.computed) {\n    alias = `[${alias}]`;\n  }\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.static`\n  if (node.static) {\n    alias = `static:${alias}`;\n  }\n\n  return alias;\n}\n\ntoKeyAlias.uid = 0;\n\ntoKeyAlias.increment = function () {\n  if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {\n    return (toKeyAlias.uid = 0);\n  } else {\n    return toKeyAlias.uid++;\n  }\n};\n"],"mappings":";;;;;;AAAA,IAAAA,MAAA,GAAAC,OAAA;AAIA,IAAAC,UAAA,GAAAD,OAAA;AACA,IAAAE,qBAAA,GAAAF,OAAA;AAGe,SAASG,UAAUA,CAChCC,IAA2B,EAEnB;EAAA,IADRC,GAAW,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAGF,IAAI,CAACC,GAAG;EAEtB,IAAII,KAAK;EAGT,IAAIL,IAAI,CAACM,IAAI,KAAK,QAAQ,EAAE;IAC1B,OAAOP,UAAU,CAACQ,SAAS,CAAC,CAAC,GAAG,EAAE;EACpC,CAAC,MAAM,IAAI,IAAAZ,MAAA,CAAAa,YAAY,EAACP,GAAG,CAAC,EAAE;IAC5BI,KAAK,GAAGJ,GAAG,CAACQ,IAAI;EAClB,CAAC,MAAM,IAAI,IAAAd,MAAA,CAAAe,eAAe,EAACT,GAAG,CAAC,EAAE;IAC/BI,KAAK,GAAGM,IAAI,CAACC,SAAS,CAACX,GAAG,CAACY,KAAK,CAAC;EACnC,CAAC,MAAM;IACLR,KAAK,GAAGM,IAAI,CAACC,SAAS,CAAC,IAAAd,qBAAA,CAAAgB,OAAoB,EAAC,IAAAjB,UAAA,CAAAiB,OAAS,EAACb,GAAG,CAAC,CAAC,CAAC;EAC9D;EAGA,IAAID,IAAI,CAACe,QAAQ,EAAE;IACjBV,KAAK,GAAG,IAAIA,KAAK,GAAG;EACtB;EAGA,IAAIL,IAAI,CAACgB,MAAM,EAAE;IACfX,KAAK,GAAG,UAAUA,KAAK,EAAE;EAC3B;EAEA,OAAOA,KAAK;AACd;AAEAN,UAAU,CAACkB,GAAG,GAAG,CAAC;AAElBlB,UAAU,CAACQ,SAAS,GAAG,YAAY;EACjC,IAAIR,UAAU,CAACkB,GAAG,IAAIC,MAAM,CAACC,gBAAgB,EAAE;IAC7C,OAAQpB,UAAU,CAACkB,GAAG,GAAG,CAAC;EAC5B,CAAC,MAAM;IACL,OAAOlB,UAAU,CAACkB,GAAG,EAAE;EACzB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}