{"ast":null,"code":"// src/features/admin/adminActions.js\n\nimport { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n// Action to fetch users (GET request)\nexport const fetchUsers = createAsyncThunk('admin/fetchUsers', async (_, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.get('/api/admin/users');\n    return response.data; // Returning the user data\n  } catch (error) {\n    return rejectWithValue(error.response.data.message); // Handling error with rejection\n  }\n});\n\n// Action to delete a user (DELETE request)\nexport const deleteUser = createAsyncThunk('admin/deleteUser', async (userId, {\n  rejectWithValue\n}) => {\n  try {\n    await axios.delete(`/api/admin/users/${userId}`);\n    return userId; // Returning userId to remove it from the local state\n  } catch (error) {\n    return rejectWithValue(error.response.data.message); // Handling error with rejection\n  }\n});\n\n// Action to reset errors in admin state\nexport const resetError = () => {\n  return dispatch => {\n    dispatch({\n      type: 'admin/resetError'\n    });\n  };\n};\n\n// // Import necessary actions from the adminSlice\n// import { fetchAdminData, approveEvent, fetchUserDetails } from './adminSlice';\n\n// // Action to refresh admin dashboard data\n// export const refreshAdminData = () => async (dispatch) => {\n//     try {\n//         await dispatch(fetchAdminData()).unwrap();\n//     } catch (error) {\n//         console.error(\"Failed to refresh admin data:\", error);\n//     }\n// };\n\n// // Action to approve an event by its ID\n// export const approveEventAction = (eventId) => async (dispatch) => {\n//     try {\n//         await dispatch(approveEvent(eventId)).unwrap();\n//     } catch (error) {\n//         console.error(`Failed to approve event with ID: ${eventId}`, error);\n//     }\n// };\n\n// // Action to fetch user details\n// export const fetchUserDetailsAction = () => async (dispatch) => {\n//     try {\n//         await dispatch(fetchUserDetails()).unwrap();\n//     } catch (error) {\n//         console.error(\"Failed to fetch user details:\", error);\n//     }\n// };","map":{"version":3,"names":["createAsyncThunk","axios","fetchUsers","_","rejectWithValue","response","get","data","error","message","deleteUser","userId","delete","resetError","dispatch","type"],"sources":["E:/Final Year project/Event Hub/Frontend/abhijeetproject/src/features/admin/adminActions.js"],"sourcesContent":["// src/features/admin/adminActions.js\r\n\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\n// Action to fetch users (GET request)\r\nexport const fetchUsers = createAsyncThunk('admin/fetchUsers', async (_, { rejectWithValue }) => {\r\n    try {\r\n        const response = await axios.get('/api/admin/users');\r\n        return response.data;  // Returning the user data\r\n    } catch (error) {\r\n        return rejectWithValue(error.response.data.message);  // Handling error with rejection\r\n    }\r\n});\r\n\r\n// Action to delete a user (DELETE request)\r\nexport const deleteUser = createAsyncThunk('admin/deleteUser', async (userId, { rejectWithValue }) => {\r\n    try {\r\n        await axios.delete(`/api/admin/users/${userId}`);\r\n        return userId;  // Returning userId to remove it from the local state\r\n    } catch (error) {\r\n        return rejectWithValue(error.response.data.message);  // Handling error with rejection\r\n    }\r\n});\r\n\r\n// Action to reset errors in admin state\r\nexport const resetError = () => {\r\n    return (dispatch) => {\r\n        dispatch({ type: 'admin/resetError' });\r\n    };\r\n};\r\n\r\n\r\n// // Import necessary actions from the adminSlice\r\n// import { fetchAdminData, approveEvent, fetchUserDetails } from './adminSlice';\r\n\r\n// // Action to refresh admin dashboard data\r\n// export const refreshAdminData = () => async (dispatch) => {\r\n//     try {\r\n//         await dispatch(fetchAdminData()).unwrap();\r\n//     } catch (error) {\r\n//         console.error(\"Failed to refresh admin data:\", error);\r\n//     }\r\n// };\r\n\r\n// // Action to approve an event by its ID\r\n// export const approveEventAction = (eventId) => async (dispatch) => {\r\n//     try {\r\n//         await dispatch(approveEvent(eventId)).unwrap();\r\n//     } catch (error) {\r\n//         console.error(`Failed to approve event with ID: ${eventId}`, error);\r\n//     }\r\n// };\r\n\r\n// // Action to fetch user details\r\n// export const fetchUserDetailsAction = () => async (dispatch) => {\r\n//     try {\r\n//         await dispatch(fetchUserDetails()).unwrap();\r\n//     } catch (error) {\r\n//         console.error(\"Failed to fetch user details:\", error);\r\n//     }\r\n// };\r\n"],"mappings":"AAAA;;AAEA,SAASA,gBAAgB,QAAQ,kBAAkB;AACnD,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,UAAU,GAAGF,gBAAgB,CAAC,kBAAkB,EAAE,OAAOG,CAAC,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAC7F,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,kBAAkB,CAAC;IACpD,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAE;EAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,OAAOJ,eAAe,CAACI,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACE,OAAO,CAAC,CAAC,CAAE;EAC1D;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMC,UAAU,GAAGV,gBAAgB,CAAC,kBAAkB,EAAE,OAAOW,MAAM,EAAE;EAAEP;AAAgB,CAAC,KAAK;EAClG,IAAI;IACA,MAAMH,KAAK,CAACW,MAAM,CAAC,oBAAoBD,MAAM,EAAE,CAAC;IAChD,OAAOA,MAAM,CAAC,CAAE;EACpB,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZ,OAAOJ,eAAe,CAACI,KAAK,CAACH,QAAQ,CAACE,IAAI,CAACE,OAAO,CAAC,CAAC,CAAE;EAC1D;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMI,UAAU,GAAGA,CAAA,KAAM;EAC5B,OAAQC,QAAQ,IAAK;IACjBA,QAAQ,CAAC;MAAEC,IAAI,EAAE;IAAmB,CAAC,CAAC;EAC1C,CAAC;AACL,CAAC;;AAGD;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}